name: Release

on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true

jobs:
  build:
    runs-on: self-hosted

    strategy:
      matrix:
        target:
          - x86_64-pc-windows-gnu
          - x86_64-unknown-linux-gnu
          - wasm32-unknown-unknown

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install cross-compilation toolchain
        run: |
          rustup target add ${{ matrix.target }}
          if [[ "${{ matrix.target }}" == "x86_64-pc-windows-gnu" ]]; then
            sudo pacman -S --noconfirm mingw-w64-gcc
          fi

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git/db
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build for ${{ matrix.target }}
        if: matrix.target != 'wasm32-unknown-unknown'
        run: |
          cargo build --target ${{ matrix.target }} --release

      - name: Build WebAssembly using Bevy CLI
        if: matrix.target == 'wasm32-unknown-unknown'
        run: |
          cargo install --git https://github.com/TheBevyFlock/bevy_cli --branch main --locked bevy_cli
          bevy b -r web -b

      - name: Prepare Web Assets
        if: matrix.target == 'wasm32-unknown-unknown'
        run: |
          mkdir -p ./out
          cp -rv ./target/bevy_web/web/bill-boards-bevy/* ./out/
          rm -rv ./out/assets/
          zip -rv ./out/web_build.zip ./out/*

      - name: Check for Existing Release
        id: check_release
        run: |
          TAG_NAME=${{ github.event.inputs.tag || github.ref_name }}
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME")
          echo "::set-output name=exists::$(echo $RESPONSE | jq '.id')"

      - name: Create Release
        id: create_release
        if: steps.check_release.outputs.exists == 'null'
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          release_name: Release ${{ github.event.inputs.tag || github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows Binary
        if: matrix.target == 'x86_64-pc-windows-gnu'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/${{ matrix.target }}/release/bill-boards-bevy.exe
          asset_name: ${matrix.target}-standalone.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload Linux Binary
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/${{ matrix.target }}/release/bill-boards-bevy
          asset_name: ${matrix.target}-standalone
          asset_content_type: application/x-pie-executable

      - name: Upload Web Build
        if: matrix.target == 'wasm32-unknown-unknown'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./out/web_build.zip
          asset_name: web-standalone.zip
          asset_content_type: application/zip
